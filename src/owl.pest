TODO = _{ "TODO" }
WHITESPACE = _{ " " | "\t" | "\n" | "\r" }
COMMENT = _{ "#" ~ (!"\n" ~ !"\r" ~ ANY)* }


LIT_PREFIX = _{ "Prefix" }
LIT_ONTOLOGY = _{ "Ontology" }
LIT_IMPORT = _{ "Import" }
LIT_DECLARATION = _{ "Declaration" }
LIT_CLASS = _{ "Class" }
LIT_DATATYPE = _{ "Datatype" }
LIT_OBJECT_PROPERTY = _{ "ObjectProperty" }
LIT_DATA_PROPERTY = _{ "DataProperty" }
LIT_ANNOTATION_PROPERTY = _{ "AnnotationProperty" }
LIT_NAMED_INDIVIDUAL = _{ "NamedIndividual" }
LIT_ANNOTATION = _{ "Annotation" }


LBRACKET = _{ "(" }
RBRACKET = _{ ")" }
LSQUARE  = _{ "[" }
RSQUARE  = _{ "]" }
LCURLY   = _{ "{" }
RCURLY   = _{ "}" }
LCHEVRON = _{ "<" }
RCHEVRON = _{ ">" }
POINT    = _{ "." }
COMMA    = _{ "," }
COLON    = _{ ":" }
CARET    = _{ "^" }
DQUOTE   = _{ "\"" }
SQUOTE   = _{ "'" }
PLUS     = _{ "+" }
MINUS    = _{ "-" }


// FIXME: Check that all keyword terminals are covered.
KEYWORD = { 
        "and" 
    |   "max" 
    |   "min" 
    |   "not" 
    |   "only" 
    |   "or" 
    |   "Self"
    |   "some" 
    |   "that" 
    |   "value" 
    |   "inverse"

    |   "length" 
    |   "minLength" 
    |   "maxLength" 
    |   "pattern" 
    |   "langPattern"

    |   "SubClassOf"
    |   "Annotations"
    |   "EquivalentTo"
    |   "Class"
    |   "Datatype"
    |   "SubClassOf"
    |   "EquivalentTo"
    |   "DisjointWith"
    |   "DisjointUnionOf"
    |   "HasKey"
    |   "ObjectProperty"
    |   "Domain"
    |   "Range"
    |   "Characteristics"
    |   "SubPropertyOf"
    |   "EquivalentTo"
    |   "DisjointWith"
    |   "InverseOf"
    |   "SubPropertyChain"

    |   "Functional"
    |   "InverseFunctional"
    |   "Reflexive"
    |   "Irreflexive"
    |   "Symmetric"
    |   "Asymmetric"
    |   "Transitive"

    |   "DataProperty"
    |   "AnnotationProperty"
    |   "Individual"
    
    |   "EquivalentClasses"
    |   "DisjointClasses"
    |   "EquivalentProperties"
    |   "DisjointProperties"
    |   "EquivalentProperties"
    |   "DisjointProperties"
    |   "SameIndividual"
    |   "DifferentIndividuals"
}


// 2 The Grammar

// 2.0 Meta-productions

LiteralList    = { Literal ~ (COMMA ~ Literal)* }
IndividualList = { Individual ~ (COMMA ~ Individual)* }

AnnotationAnnotatedList                   = { Annotations? ~ Annotation                   ~ (COMMA ~ Annotations? ~ Annotation)* }
DescriptionAnnotatedList                  = { Annotations? ~ Description                  ~ (COMMA ~ Annotations? ~ Description)* }
ObjectPropertyCharacteristicAnnotatedList = { Annotations? ~ ObjectPropertyCharacteristic ~ (COMMA ~ Annotations? ~ ObjectPropertyCharacteristic)* }
ObjectPropertyExpressionAnnotatedList     = { Annotations? ~ ObjectPropertyExpression     ~ (COMMA ~ Annotations? ~ ObjectPropertyExpression)* }
DataPropertyExpressionAnnotatedList       = { Annotations? ~ DataPropertyExpression       ~ (COMMA ~ Annotations? ~ DataPropertyExpression)* }
IRIAnnotatedList                          = { Annotations? ~ IRI                          ~ (COMMA ~ Annotations? ~ IRI)* }
AnnotationPropertyIRIAnnotatedList        = { Annotations? ~ AnnotationPropertyIRI        ~ (COMMA ~ Annotations? ~ AnnotationPropertyIRI)* }
FactAnnotatedList                         = { Annotations? ~ Fact                         ~ (COMMA ~ Annotations? ~ Fact)* }
IndividualAnnotatedList                   = { Annotations? ~ Individual                   ~ (COMMA ~ Annotations? ~ Individual)* }

Description2List              = { Description              ~ (COMMA ~ Description)+ }
ObjectPropertyExpression2List = { ObjectPropertyExpression ~ (COMMA ~ ObjectPropertyExpression)+ }
DataPropertyExpression2List   = { DataPropertyExpression   ~ (COMMA ~ DataPropertyExpression)+ }
Individual2List               = { Individual               ~ (COMMA ~ Individual)+ }


// 2.1 IRIs, Integers, Literals and Entities

FullIRI = ${ LCHEVRON ~ RFC3987_Iri ~ RCHEVRON }
PrefixName = ${ !KEYWORD ~ SPARQL_PnameNs }
AbbreviatedIRI = ${ SPARQL_PnameLn }
SimpleIRI = ${ !KEYWORD ~ SPARQL_PnLocal }
IRI = { FullIRI | AbbreviatedIRI | SimpleIRI }

NonNegativeInteger = @{ Zero | PositiveInteger }
PositiveInteger    = @{ NonZero ~ Digit* }
Digits             = @{ Digit+ }
NonZero            = @{ ASCII_NONZERO_DIGIT }
Digit              = @{ ASCII_DIGIT }
Zero               = @{ "0" }

ClassIRI              = { IRI }
Datatype              = { DatatypeIRI | "integer" | "decimal" | "float" | "string" }
DatatypeIRI           = { IRI }
ObjectPropertyIRI     = { IRI }
DataPropertyIRI       = { IRI }
AnnotationPropertyIRI = { IRI }
Individual            = { NodeID | IndividualIRI }
IndividualIRI         = { IRI }
NodeID                = { SPARQL_BlankNodeLabel }

Literal                   = { TypedLiteral | StringLiteralWithLanguage | StringLiteralNoLanguage | IntegerLiteral | DecimalLiteral | FloatingPointLiteral }
TypedLiteral              = { LexicalValue ~ CARET{2} ~ Datatype }
StringLiteralNoLanguage   = { QuotedString }
StringLiteralWithLanguage = { QuotedString ~ "@" ~ LanguageTag }
LanguageTag               = ${ "@" ~ BCP47_LangTag }
LexicalValue              = ${ QuotedString }
QuotedString              = ${ DQUOTE ~ ( !DQUOTE ~ ("\\\\" | "\\\"" | ANY) )* ~ DQUOTE }
FloatingPointLiteral      = ${ (PLUS | MINUS)? ~ ((Digits ~ (POINT ~ Digits)? ~ Exponent?) | (POINT ~ Digits ~ Exponent?)) ~ ( "f" | "F" ) }
Exponent                  = ${ ("e" | "E") ~ (PLUS | MINUS)? ~ Digits }
DecimalLiteral            = ${ (PLUS | MINUS)? ~ Digits ~ POINT ~ Digits }
IntegerLiteral            = ${ (PLUS | MINUS)? ~ Digits }

Entity = {
        (LIT_DATATYPE ~ LBRACKET ~ DatatypeIRI ~ RBRACKET)
    |   (LIT_CLASS ~ LBRACKET ~ ClassIRI ~ RBRACKET)
    |   (LIT_OBJECT_PROPERTY ~ LBRACKET ~ ObjectPropertyIRI ~ RBRACKET)
    |   (LIT_DATA_PROPERTY ~ LBRACKET ~ DataPropertyIRI ~ RBRACKET)
    |   (LIT_ANNOTATION_PROPERTY ~ LBRACKET ~ AnnotationPropertyIRI ~ RBRACKET)
    |   (LIT_NAMED_INDIVIDUAL ~ LBRACKET ~ IndividualIRI ~ RBRACKET)
}

// 2.2 Ontologies and Annotations

Annotations             = { "Annotations:" ~ AnnotationAnnotatedList }
Annotation              = { AnnotationPropertyIRI ~ AnnotationTarget }
AnnotationTarget        = { NodeID | IRI | Literal }

OntologyDocument  = { PrefixDeclaration* ~ Ontology }
PrefixDeclaration = { "Prefix:" ~ PrefixName ~ FullIRI }
Ontology = { "Ontology:" ~ ( OntologyIRI ~ VersionIRI?)? ~ Import* ~ Annotations* ~ Frame* }
OntologyIRI = { IRI }
VersionIRI = { IRI }
Import = { "Import:" ~ IRI }
Frame = { DatatypeFrame | ClassFrame | ObjectPropertyFrame | DataPropertyFrame | AnnotationPropertyFrame | IndividualFrame | Misc }


// 2.3 Property and Datatype Expressions

ObjectPropertyExpression = { InverseObjectProperty | ObjectPropertyIRI }
InverseObjectProperty    = { "inverse" ~ ObjectPropertyIRI }
DataPropertyExpression   = { DataPropertyIRI }

DataRange = { DataConjunction ~ ("or" ~ DataConjunction)* }
DataConjunction = { DataPrimary ~ ("and" ~ DataPrimary)*  }
DataPrimary = { "not"? ~ DataAtomic }
DataAtomic = { 
        ( LCURLY ~ LiteralList ~ RCURLY) 
    |   ( LBRACKET ~ DataRange ~ RBRACKET )
    |   DatatypeRestriction
    |   Datatype 
}
DatatypeRestriction = { Datatype ~ LSQUARE ~ Facet ~ RestrictionValue ~ (COMMA ~ Facet ~ RestrictionValue)* ~ RSQUARE }
Facet = { "length" | "minLength" | "maxLength" | "pattern" | "langPattern" | "<=" | "<" | ">=" | ">" }
RestrictionValue = { Literal }


// 2.4 Descriptions

Description = { Conjuction ~ ("or" ~ Conjuction)* }
Conjuction = { 
        (ClassIRI ~ "that" ~ "not"? ~ Restriction ~ ( "and" ~ "not"? ~ Restriction )*)
    |   (Primary ~ ("and" ~ Primary)*)
}
Primary = { "not"? ~ (Restriction | Atomic) }
Restriction = {
        (DataPropertyExpression ~ "some" ~ DataPrimary )
    |   (DataPropertyExpression ~ "only" ~ DataPrimary )
    |   (DataPropertyExpression ~ "value" ~ Literal )
    |   (DataPropertyExpression ~ "min" ~ NonNegativeInteger ~ DataPrimary? )
    |   (DataPropertyExpression ~ "max" ~ NonNegativeInteger ~ DataPrimary? )
    |   (DataPropertyExpression ~ "exactly" ~ NonNegativeInteger ~ DataPrimary? )
    |   (ObjectPropertyExpression ~ "some" ~ Primary)
    |   (ObjectPropertyExpression ~ "only" ~ Primary)
    |   (ObjectPropertyExpression ~ "value" ~ Individual)
    |   (ObjectPropertyExpression ~ "Self")
    |   (ObjectPropertyExpression ~ "min" ~ NonNegativeInteger ~ Primary? )
    |   (ObjectPropertyExpression ~ "max" ~ NonNegativeInteger ~ Primary? )
    |   (ObjectPropertyExpression ~ "exactly" ~ NonNegativeInteger ~ Primary? )
}
Atomic = {
        ClassIRI 
    |   ( LCURLY ~ IndividualList ~ RCURLY )
    |   ( LBRACKET ~ Description ~ RBRACKET )
}


// 2.5 Frames and Miscellaneous

DatatypeFrame = { 
    "Datatype:" ~ Datatype
    ~ Annotations* 
    ~ ( "EquivalentTo:" ~ Annotations? ~ DataRange )?
    ~ Annotations*
  }

ClassFrame  = { ("Class:" ~ ClassIRI) ~ ClassClause* }
ClassClause = {
        ("Annotations:" ~ AnnotationAnnotatedList)
    |   ("SubClassOf:" ~ DescriptionAnnotatedList)
    |   ("EquivalentTo:" ~ DescriptionAnnotatedList)
    |   ("DisjointWith:" ~ DescriptionAnnotatedList)
    |   ("DisjointUnionOf:" ~ Annotations? ~ Description2List)
    |   ("HasKey:" ~ Annotations? ~ (ObjectPropertyExpression | DataPropertyExpression)+)
}

ObjectPropertyFrame = { ("ObjectProperty:" ~ ObjectPropertyIRI) ~ ObjectPropertyClause* }
ObjectPropertyClause = {
        ("Annotations:" ~ AnnotationAnnotatedList)
    |   ("Domain:" ~ DescriptionAnnotatedList)
    |   ("Range:" ~ DescriptionAnnotatedList)
    |   ("Characteristics:" ~ ObjectPropertyCharacteristicAnnotatedList)
    |   ("SubPropertyOf:" ~ ObjectPropertyExpressionAnnotatedList)
    |   ("EquivalentTo:" ~ ObjectPropertyExpressionAnnotatedList)
    |   ("DisjointWith:" ~ ObjectPropertyExpressionAnnotatedList)
    |   ("InverseOf:" ~ ObjectPropertyExpressionAnnotatedList)
    |   ("SubPropertyChain:" ~ Annotations? ~ ObjectPropertyExpression ~ ("o" ~ ObjectPropertyExpression)+)
}
ObjectPropertyCharacteristic = {
        "Functional"
    |   "InverseFunctional"
    |   "Reflexive"
    |   "Irreflexive"
    |   "Symmetric"
    |   "Asymmetric"
    |   "Transitive"
}

DataPropertyFrame = { ("DataProperty:" ~ DataPropertyIRI) ~ DataPropertyClause* }
DataPropertyClause = {
        ("Annotations:" ~ AnnotationAnnotatedList)
    |   ("Domain:" ~ DescriptionAnnotatedList)
    |   ("Range:" ~ DescriptionAnnotatedList)
    |   ("Characteristics:" ~ Annotations? ~ "Functional")
    |   ("SubPropertyOf:" ~ DataPropertyExpressionAnnotatedList)
    |   ("EquivalentTo:" ~ DataPropertyExpressionAnnotatedList)
    |   ("DisjointWith:" ~ DataPropertyExpressionAnnotatedList)
}

AnnotationPropertyFrame = { ("AnnotationProperty:" ~ AnnotationPropertyIRI) ~ AnnotationPropertyClause* }
AnnotationPropertyClause = {
        ("Annotations:" ~ AnnotationAnnotatedList)
    |   ("Domain:" ~ IRIAnnotatedList)
    |   ("Range:" ~ IRIAnnotatedList)
    |   ("SubPropertyOf:" ~ AnnotationPropertyIRIAnnotatedList)
}

IndividualFrame = { ("Individual:" ~ Individual) ~ IndividualClause* }
IndividualClause = {
        ("Annotations:" ~ AnnotationAnnotatedList)
    |   ("Types:" ~ DescriptionAnnotatedList)
    |   ("Facts:" ~ FactAnnotatedList)
    |   ("SameAs:" ~ IndividualAnnotatedList)
    |   ("DifferentFrom:" ~ IndividualAnnotatedList)
}

Fact = { "not"? ~ (ObjectPropertyFact | DataPropertyFact) }
ObjectPropertyFact = { ObjectPropertyIRI ~ Individual }
DataPropertyFact = { DataPropertyIRI ~ Literal }

Misc = {
        ("EquivalentClasses:" ~ Annotations? ~ Description2List)
    |   ("DisjointClasses:" ~ Annotations? ~ Description2List)
    |   ("EquivalentProperties:" ~ Annotations? ~ ObjectPropertyExpression2List)
    |   ("DisjointProperties:" ~ Annotations? ~ ObjectPropertyExpression2List)
    |   ("EquivalentProperties:" ~ Annotations? ~ DataPropertyExpression2List)
    |   ("DisjointProperties:" ~ Annotations? ~ DataPropertyExpression2List)
    |   ("SameIndividual:" ~ Annotations? ~ Individual2List)
    |   ("DifferentIndividuals:" ~ Annotations? ~ Individual2List)
    |   ("HasKey:" ~ Description ~ Annotations? ~ (ObjectPropertyExpression | DataPropertyExpression)+ )
}
